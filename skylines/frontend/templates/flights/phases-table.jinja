{% macro render_circling_performance(flight) -%}
<table class="table table-condensed">
  <tbody>
    <tr>
      <th></th>
      <th class='numeric'>{% trans %}Thermals{% endtrans %}<br/>{% trans %}Avg. vario{% endtrans %}</th>
      <th class='numeric'>{% trans %}Duration{% endtrans %}<br/>&Delta;H</th>
      <th class='numeric'></th>
      <th class='numeric'></th>
    </tr>
    {% for ph in flight.circling_performance -%}
    {% with phase=phase_formatter(ph) -%}
    <tr>
      <th>{{ phase.circling_direction }}</th>
      <td class='numeric'>{{ phase.count }}<br/>{{ phase.vario }}</td>
      <td class='numeric'><abbr title="{{ phase.fraction }}">{{ phase.duration }}</abbr><br/>{{ phase.alt_diff }}</td>
      <td class='numeric'></td>
      <td class='numeric'></td>
    </tr>
    {%- endwith %}
    {%- endfor %}
  </tbody>
</table>
{%- endmacro %}

{% macro render_cruise_performance(flight) -%}
<table class="table table-condensed">
    {% for ph in flight.cruise_performance -%}
    {% with phase=phase_formatter(ph) -%}
    <tr>
      <th>{% trans %}Duration{% endtrans %}</th>
      <td>{{ phase.duration }} ({{ phase.fraction }})</td>
    </tr>
    <tr>
      <th>&Delta;H</th>
      <td>{{ phase.alt_diff }}</td>
    </tr>
    <tr>
      <th>{% trans %}Distance{% endtrans %}</th>
      <td>{{ phase.distance }}</td>
    </tr>
    <tr>
      <th>{% trans %}Avg. vario{% endtrans %}</th>
      <td>{{ phase.vario }}</td>
    </tr>
    <tr>
      <th>{% trans %}Avg. speed{% endtrans %}</th>
      <td>{{ phase.speed }}</td>
    </tr>
    <tr>
      <th><abbr title="{% trans %}Glide Rate{% endtrans %}">{% trans %}GR{% endtrans %}</abbr></th>
      <td>{{ phase.glide_rate }}</td>
    </tr>
    <tr>
      <th>{% trans %}Glides{% endtrans %}</th>
      <td>{{ phase.count }}</td>
    </tr>
    {%- endwith %}
    {%- endfor %}
  </tbody>
</table>
{%- endmacro %}

{% macro render_leg_statistics(flight, contest_type, trace_type) -%}
{% with legs=leg_formatter(flight, flight.get_contest_legs(contest_type, trace_type)) -%}
{% if legs -%}
<table id="leg-table-{{ contest_type }}-{{ trace_type }}" class="table table-condensed text-right">
  <tbody>
    <tr class="small">
      <th></th>
      <th class='numeric'>{% trans %}Dist.{% endtrans %}</th>
      <th class='numeric hidden-md'><abbr title="{% trans %}Duration{% endtrans %}">{% trans %}&Delta;t{% endtrans %}</th>
      <th class='numeric'>{% trans %}Avg. speed{% endtrans %}</th>
      <th class='numeric'>{% trans %}Climb %{% endtrans %}</th>
      <th class='numeric'>{% trans %}Avg. vario{% endtrans %}</th>
      <th class='numeric'><abbr title="{% trans %}Glide Rate while cruising{% endtrans %}">{% trans %}GR{% endtrans %}</abbr></th>
    </tr>
    {% for leg in legs -%}
    <tr class="small">
      <td class='start' data-content='{{ leg.start_time_of_day }}'>{{ loop.index }}</td>
      <td class='numeric'>{{ leg.distance }}</td>
      <td class='duration hidden-md' data-content='{{ leg.duration.total_seconds() }}'>{{ leg.duration }}</td>
      <td class='numeric'>{{ leg.speed }}</td>
      <td class='numeric'>{{ leg.climb_percentage }}%</td>
      <td class='numeric'>{{ leg.climbrate }}</td>
      <td class='numeric'>{{ leg.glide_rate }}</td>
    </tr>
    {%- endfor %}
  </tbody>
</table>
{%- else %}
{% trans %}No data found...{% endtrans %}
{%- endif %}
{%- endwith %}
{%- endmacro %}

{% macro render_phases(flight) -%}
<table id="phases-table" class="table table-condensed table-striped">
  <thead>
    <tr>
      <th class='numeric'>#</th>
      <th>{% trans %}Phase{% endtrans %}</th>
      <th>{% trans %}Start{% endtrans %}</th>
      <th>{% trans %}Duration{% endtrans %}</th>
      <th class='numeric'>&Delta;H</th>
      <th class='numeric'>{% trans %}Distance{% endtrans %}</th>
      <th class='numeric'>{% trans %}Avg. vario{% endtrans %}</th>
      <th class='numeric'>{% trans %}Avg. speed{% endtrans %}</th>
      <th class='numeric'><abbr title="{% trans %}Glide Rate{% endtrans %}">{% trans %}GR{% endtrans %}</abbr></th>
    </tr>
  </thead>
  {% with takeoff_midnight=flight.takeoff_time.replace(hour=0, minute=0, second=0, microsecond=0) -%}
  <tbody>
    {% for ph in flight.phases -%}
    {% with phase=phase_formatter(ph) -%}
    <tr>
      <td class='numeric'>{{ loop.index }}</td>
      <td>{{ phase.type }}
        {% if phase.is_circling -%}
        <span class='label label-default'>
          {{ phase.circling_direction|lower }}
        </span>
        {%- endif %}
      </td>
      <td class='start' data-content='{{ (ph.start_time - takeoff_midnight).total_seconds() }}'>{{ phase.start }}</td>
      <td class='duration' data-content='{{ ph.duration.total_seconds() }}'>{{ phase.duration }}</td>
      <td class='numeric'>{{ phase.alt_diff }}</td>
      <td class='numeric'>{{ phase.distance }}</td>
      <td class='numeric'>{{ phase.vario }}</td>
      <td class='numeric'>{{ phase.speed }}</td>
      <td class='numeric'>{{ phase.glide_rate }}</td>
    </tr>
    {%- endwith %}
    {%- endfor %}
  </tbody>
  {%- endwith %}
</table>
{%- endmacro %}
